<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AboutTheGardens on</title><link>https://www.guanpj.top/</link><description>Recent content in AboutTheGardens on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://www.guanpj.top/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://www.guanpj.top/2023-03-18/</link><pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-18/</guid><description>2023-03-18 今日开发工作 今日感想</description></item><item><title/><link>https://www.guanpj.top/2023-03-15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-15/</guid><description>弄完了同步，牛逼</description></item><item><title/><link>https://www.guanpj.top/2023-03-16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-16/</guid><description/></item><item><title/><link>https://www.guanpj.top/2023-03-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-19/</guid><description>今日开发工作 今日感想</description></item><item><title/><link>https://www.guanpj.top/2023-03-20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-20/</guid><description>今日开发工作 今日感想 sadlfjsal
from windows
之类主页是[[AboutTheGarden]]</description></item><item><title/><link>https://www.guanpj.top/%E5%85%B6%E4%BB%96%E6%A8%A1%E7%89%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/%E5%85%B6%E4%BB%96%E6%A8%A1%E7%89%88/</guid><description>史蒂夫 line1: &amp;lt;% tp.file.cursor(1) %&amp;gt; line2: &amp;lt;% tp.file.cursor(2) %&amp;gt;</description></item><item><title/><link>https://www.guanpj.top/%E6%88%91%E7%9A%84%E6%97%A5%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/%E6%88%91%E7%9A%84%E6%97%A5%E8%AE%B0/</guid><description>今日开发工作 今日感想</description></item><item><title/><link>https://www.guanpj.top/%E6%9C%AA%E5%91%BD%E5%90%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid><description/></item><item><title>About Atlas</title><link>https://www.guanpj.top/About-Atlas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/About-Atlas/</guid><description>up:: [[ACCESS 笔记组织法]]
Atlas意思是地图集。
单个案例或项目的MOC，考虑直接放在对应文件夹里面，相当于起到一个个文件夹的readme和导览的作用。这里专门放这些MOC的MOC。
围绕本库和obsidian的使用教程、方法和细节，也放到这里，就像是地图的指南针。</description></item><item><title>About Extras</title><link>https://www.guanpj.top/About-Extras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/About-Extras/</guid><description>up:: [[ACCESS 笔记组织法]]
[[图片保存：图床or本地]]</description></item><item><title>HashMap 源码解析</title><link>https://www.guanpj.top/HashMap-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/HashMap-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>前言 HashMap 是 Java 中最常用 K-V 容器，使用哈希值来确定元素存储的位置，HashMap 对 Entry 进行了扩展（Node），使其形成以链表或者树的形式存储在 HashMap 的容器里。
在 Java 8 之前和之后，HashMap 的实现有较大的不同，因此对于 put 流程、扩容机制等主要过程分析将会采用两个版本进行对比。
成员变量 HashMap 成员变量和构造方法声明如下（Java 7 和 8 大致相同，以下为 Java 8 版本）：</description></item><item><title>Index for Atlases</title><link>https://www.guanpj.top/Index-for-Atlases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/Index-for-Atlases/</guid><description>up:: [[ACCESS 笔记组织法]]
1 2 3 4 5 6 7 8 9 10 11 // 获取当前文件所在的文件夹 const currentFolder = dv.</description></item><item><title>Index for Extras</title><link>https://www.guanpj.top/Index-for-Extras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/Index-for-Extras/</guid><description>up:: [[ACCESS 笔记组织法]]
1 2 3 4 5 6 7 8 9 10 11 // 获取当前文件所在的文件夹 const currentFolder = dv.</description></item><item><title>IO</title><link>https://www.guanpj.top/IO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/IO/</guid><description/></item><item><title>Troubleshooting and FAQ</title><link>https://www.guanpj.top/2023-03-22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/2023-03-22/</guid><description>Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.
While you&amp;rsquo;re here, join our Discord :)</description></item><item><title>泛型</title><link>https://www.guanpj.top/%E6%B3%9B%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/%E6%B3%9B%E5%9E%8B/</guid><description>什么是泛型？ 声明中具有一个或者多个类型参数(type parameter)的类或者接口，就是泛型类或者接口。泛型类和接口统称为泛型(generic type)。
每种泛型定义一组类型形参(formal type parameters)，这些类型形参有时也被简称为类型参数(type parameter)，例如对于 List&amp;lt;E&amp;gt; 而言，List&amp;lt;String&amp;gt; 就是一个参数化的类型(parameterized type)，String 就是对应于类型形参(formal type parameters)的类型实参(actual type parameter)。
而如果 List&amp;lt;E&amp;gt; 不使用泛型参数，List 则为原生类型(raw type)。原生类型就像从类型声明中删除了所有泛型信息一样。实际上原生类型 List 与 Java 平台在有泛型之前的接口类型 List 完全一样。</description></item></channel></rss>