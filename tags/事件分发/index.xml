<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>事件分发 on</title><link>https://www.guanpj.top/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</link><description>Recent content in 事件分发 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.guanpj.top/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>七、View 事件机制分析</title><link>https://www.guanpj.top/%E4%B8%83View-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.guanpj.top/%E4%B8%83View-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</guid><description>不知不觉，系列文章已经更新到第四篇了，从手机电源被按下到 App 被点击再到 UI 呈现在屏幕上，从系统内核到 framework 层再到应用层，期间发生了无数次交互，最终才使得我们五彩斑斓的 View 得于被渲染并出现在我们的眼前。可是，有了这些还不够，用户也是需要跟 App 进行交互的，其中最重要也是最直接的交互方式便是触摸手机屏幕了！
而我们的手指的触摸事件是怎样被一屏幕上的 View 感知的呢？本文将继续基于 Android Nougat 的源码来讲解这个过程。
触摸事件的产生 ab cd 有硬件基础的同学应该都知道，计算机（当然包括手机）输入输出设备是通过触发硬件中断来</description></item></channel></rss>